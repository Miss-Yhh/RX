from datetime import datetime
import random
from http import HTTPStatus
from openai import OpenAI
# import dashscope

lingjie = "sk-5b22a660a4c945339ad2c6aa13fcf822"

def qwen_direct(client, model, system_prompt, query, qahistory):
    chatcompletion = client.chat.completions.create(
        model=model,
        messages=[
          {'role': 'system', 'content': system_prompt},
          {'role': 'user', 'content': qahistory[0]},
          {'role': 'assistant', 'content': qahistory[1]},
          {'role': 'user', 'content': query}
        ],
        temperature=0.01
    )
    return chatcompletion.choices[0].message.content


def qwen_direct_once(system_prompt, query, fewshots=None):
    # hpc+本地端口转发
    client = OpenAI(
        api_key="EMPTY",
        base_url="http://localhost:9833/v1",
    )
    model = 'wmjchat'
    # # 使用边缘机
    # client = OpenAI(
    #     api_key="EMPTY",
    #     base_url="http://192.168.31.90:9833/v1",
    # )
    # model = 'wmjchat'

    messages = [
        {'role': 'system', 'content': system_prompt},
    ]
    if fewshots:
      for q, a in fewshots:
        q = {'role': 'user', 'content': q}
        a = {'role': 'assistant', 'content': a}
        messages.append(q)
        messages.append(a)
    query = {'role': 'user', 'content': query}
    messages.append(query)      
    chatcompletion = client.chat.completions.create(
        model=model,
        messages=messages,
        temperature=0.01
    )
    return chatcompletion.choices[0].message.content

def qwen_stream(client, model, system_prompt, query):
    chatcompletion = client.chat.completions.create(
        model=model,
        messages=[{'role': 'system', 'content': system_prompt},
                  {'role': 'user', 'content': query}],
        temperature=0.01,
        stream=True
    )
    for chunk in chatcompletion:
       if chunk:
          yield chunk.choices[0].delta.content 

def qwen_stream_once(query='', system_prompt='', history_query='', history_answer=''):
    # hpc+本地端口转发
    client = OpenAI(
        api_key="EMPTY",
        base_url="http://localhost:9833/v1",
    )
    model = 'wmjchat'
    # 使用边缘机
    # client = OpenAI(
    #     api_key="EMPTY",
    #     base_url="http://192.168.31.90:9833/v1",
    # )
    # model = 'wmjchat'
    chatcompletion = client.chat.completions.create(
        model=model,
        messages=[
            {'role': 'system', 'content': system_prompt},
            {'role': 'user', 'content': history_query},
            {'role': 'assistant', 'content': history_answer},
            {'role': 'user', 'content': query}
        ],
        temperature=0.01,
        stream=True,
        presence_penalty=2.0,
    )
    for chunk in chatcompletion:
       if chunk:
          yield chunk.choices[0].delta.content 

# def qwen_direct_once_forcls(system_prompt, query, fewshots=None):
#     client = OpenAI(
#         api_key="EMPTY",
#         base_url="http://localhost:8000/v1",
#     )
#     model = 'wmjchat'
#     messages = [
#         {'role': 'system', 'content': system_prompt},
#     ]
#     if fewshots:
#       for q, a in fewshots:
#         q = {'role': 'user', 'content': q}
#         a = {'role': 'assistant', 'content': a}
#         messages.append(q)
#         messages.append(a)
#     query = {'role': 'user', 'content': query}
#     messages.append(query)      
#     chatcompletion = client.chat.completions.create(
#         model=model,
#         messages=messages,
#         temperature=0.01
#     )
#     return chatcompletion.choices[0].message.content
  
if __name__ == '__main__':
  question = "没有问题了，参观下一个展区吧"  # 继续
  question = "带我参观医疗机器人展区"  # 参观 医疗机器人展区
  question = "没有任何问题了，你去休息吧"  # 休眠
  question = "介绍一下机器人国家重点实验室。"  # 机器人国家重点实验室起源于1986年哈工大机器人研究所，是最早研究机构之一，涵盖多学科，承担国家重大项目，成果显著，2007年成为国家重点实验室，多次评估优秀。

  document = "关键词：“医疗机器人”。描述内容：“医疗机器人实验室承担了一批国家自然科学基金基础研究、863计划、国家重点研发计划等重点和重大医疗机器人研究项目，突破了医疗机器人灵巧手术器械设计、力反馈感知、精确主从控制、狭小空间精准操作、风险分析与安全控制、动物与临床试验、系统集成等关键技术，研制了骨科、普外科、心内科、神经外科手术机器人系统，获省部级科技进步奖4项、出版专著3部、获国家发明专利200余项。腹腔微创手术机器人获批国产腔镜手术医疗器械III类注册证，正在实施产业化。”\n关键词：“实验室背景”。描述内容：“机器人技术与系统国家重点实验室”源自哈尔滨工业大学机器人研究所，该所始建于1986年，是我国最早开展机器人技术研究的单位之一，在上个世纪80年代研制出我国第一台弧焊机器人和第一台点焊机器人。实验室依托机械工程（第四次学科评估A+）、控制科学与工程（A+）、电气工程（A-）等一级学科组建。于2007年开始建设，2007年8月通过可行性论证，2010年7月通过建设验收，2013年首次评估良好，2018年第二次评估优秀。”\n关键词：“实验室历史”。描述内容：“机器人技术与系统国家重点实验室”源自哈尔滨工业大学机器人研究所，该所始建于1986年，是我国最早开展机器人技术研究的单位之一，在上个世纪80年代研制出我国第一台弧焊机器人和第一台点焊机器人。实验室依托机械工程（第四次学科评估A+）、控制科学与工程（A+）、电气工程（A-）等一级学科组建。于2007年开始建设，2007年8月通过可行性论证，2010年7月通过建设验收，2013年首次评估良好，2018年第二次评估优秀。”\n关键词：“实验室来源”。描述内容：“机器人技术与系统国家重点实验室”源自哈尔滨工业大学机器人研究所，该所始建于1986年，是我国最早开展机器人技术研究的单位之一，在上个世纪80年代研制出我国第一台弧焊机器人和第一台点焊机器人。”\n关键词：“实验室定位”。描述内容：“立足国际机器人技术的发展前沿，面向国民经济发展与科技发展的战略目标和重大需求，凸显航天、国防特色和军民融合发展理念，开展战略性、前沿性、前瞻性的先进机器人基础研究、应用基础研究，通过多学科交叉，积极开展高水平学术交流与合作，将实验室建设成为具有国际影响力的机器人技术自主创新研究、高端人才培养与社会服务的国家级基地。”\n关键词：“医疗机器人”。描述内容：“研究背景与意义：医疗机器人是医疗服务体系、公共卫生体系建设中重要的基础装备，是引领医学诊疗技术向早期诊断、精确诊断、微创治疗和精准治疗发展的重要支撑，也是催生新一轮健康经济发展的核心引擎，具有高度的前瞻性、战略性、带动性和成长性。习近平总书记明确指出：'要加快高端医疗设备国产化进程，降低成本，推动民族品牌企业不断发展'。重点实验室立足医疗机器人国际学术研究前沿，面向国民经济发展和人民健康需求，开展诊疗一体化、微创、介入、精准治疗等医疗机器人关键技术与系统研究。行业贡献：重点实验室承担了一批国家自然科学基金基础研究、863计划、国家重点研发计划等重点和重大医疗机器人研究项目，突破了医疗机器人灵巧手术器械设计、力反馈感知、精确主从控制、狭小空间精准操作、风险分析与安全控制、动物与临床试验、系统集成等关键技术，研制了骨科、普外科、心内科、神经外科手术机器人系统，获省部级科技进步奖4项、出版专著3部、获国家发明专利200余项。腹腔微创手术系统正在实施产业化，践行了创新驱动发展国家战略。”\n关键词：“实验室定位”。描述内容：“1. 面向世界机器人领域科技前沿，在空间机器人先进构型设计、受限环境机器人系统分析与智能控制、微纳机器人建模与驱动等基础研究方面处于国际领先地位。2. 面向国家重大需求，支撑国家重大科学工程建设，成为我国航天、国防、军工领域发展不可替代的重要科技力量。3. 面向国民经济主战场，突破一批制约机器人产业化的技术瓶颈，促进科研成果的转化，提升国产机器人国际竞争力。以基础和应用基础研究为根本:瞄准机器人技术国际前沿研究方向，开展前瞻性和创新性基础的应用基础研究   满足国家重大需求:立足航天，服务国防，以理论研究和关键技术为突破口，为国家安全和重大需求提供技术支撑   服务国民经济建设:围绕国民经济主战场和产业需求，开展核心技术和重大装备攻关”\n关键词：“实验室概况”。描述内容：“机器人技术与系统国家重点实验室源自哈尔滨工业大学机器人研究所，始建于1986年，是我国最早开展机器人技术研究的单位之一。实验室依托机械工程（第四次学科评估A+)、控制科学与工程（A+)、电气工程（A-）等一级学科组建。2007年开始筹备，2007年8月通过可行性论证，2010年7月通过建设验收，2013年通过首次评估，获评良好；2018年通过二次评估，获评优秀。实验室建设的基础目标是攻克一批机器人领域前沿理论与核心技术，支撑国家重大科技工程的实施，引领我国机器人技术的跨越式发展；突破一批制约机器人产业化的技术瓶颈，促进科研成果的转化，提升国产机器人国际竞争力；培养和汇聚一批高端人才，促进学科交叉融合，形成特色鲜明、国际一流的学科体系。”\n关键词：“实验室历史”。描述内容：“1985-1986成功研制我国第一台华宇1型弧焊机器人  1986 成立哈工大机器人研究所  1991 经科技部批准成立863计划智能机器人机构研究网点开放实验室   2000 建立'黑龙江省机器人技术重点实验室'   2007 机器人技术与系统国家重点实验室开始筹建，2010年通过验收   2013 实验室通过科技部第一次评估，综合评估成绩为良好   2017 国家机器人创新中心   2018 实验室通过科技部第二次评估，综合评估成绩为优秀   2022 成为首批完成重组的 全国重点实验室”\n关键词：“实验室概况展区”。描述内容：“机器人技术与系统全国重点实验室源自哈工大机器人所，始建于1986年，是我国最早开展机器人技术研究的单位之一。实验室依托机械工程《第四次学科评估A+》、控制科学与工程(A+)、电气工程(A-)等一级学科组建。2007年开始筹备，2007年8月通过可行性论证，2010年7月通过建设验收，2013年通过首次评估，获评良好;2018年通过二次评估，获评优秀。本实验室是高校领域内唯一与机器人相关的全国重点实验室。”"

  # document = ''

  # system_prompt = "你是赛尔实验室和哈工大机器人实验室共同研发的导游机器人，你的名字是小红。现在在哈尔滨工业大学（简称哈工大）科创大厦的全国重点机器人实验室展厅，你的主线任务是按照预定好的目标带游客按顺序参观航天馆的所有展厅，包括服务及医疗机器人展区、宇航空间机构及控制展区、空间机器人展区、服务及医疗机器人展区、宇航空间机构及控制展区、工业及特种机器人展区、空间机器人展区、机器人基础功能部件展区、微纳及仿生机器人展区、实验室概况展区、实验室队伍展区、实验室宣传视频展区、未来展望展区、开放服务展区、领导关怀及荣誉展区，同时游客可能随时打断你，你需要对游客的意图进行识别并分类。当你识别到游客明确想要参观某个展厅时，比如游客说“带我参观医疗机器人展区吧”或“我想看看空间在轨服务机器人”、“没有问题了，继续参观下一个展厅吧”或“我想看看之前的展厅”，你需要将任务分类到“参观”，进而终止当前的主线任务，导航到游客指定的展厅，并输出“参观 医疗机器人展区”或“参观 空间机器人展区”或“参观 上一个”或“参观 下一个”; 当你识别到游客提出了一个问题时，比如游客说“我想了解一下人机协作型工业机器人”（明确说明展品名称（例如“北斗卫星”））、“介绍一下这个展品”（用户可能在用手指指向某一个展品（只是说了“这个”）），你需要将任务分类到“问答”，进而执行问答任务，并根据游客是不是有可能正在指着一个展品，输出“问答”或“问答 指着”;当你识别到游客想要打断你正在执行的任务时，比如“不要再继续讲解了”或“可以了，停下吧”或“原地休眠”，你需要将任务分类到“休眠”，进而停止你所有正在执行的任务，进入等待状态，并输出“休眠”；，注意！只有游客想让机器人休眠的意图很明显时才分类为休眠当你识别到游客想让你继续主线任务时，比如“没有了”或“我没有问题了，继续参观下一个展厅吧”或“继续参观吧”，你需要将任务分类到继续，从而继续执行主线任务，并输出“继续”。他们现在对你发出指令，你需要先对他们的指令进行分类，如果指令类别不是问答，那你就根据指令类别输出相应的回答，如果指令类别是问答，你需要根据参考文本回答所有关于机器人和该实验室相关的问题。参考文本上没有的信息尽量不要自行补充（但可以适当精简）。必要的时候回答你不能确定。你的回答要简洁，不能超过50个字。"
  system_prompt = '你是赛尔实验室和哈工大机器人实验室共同研发的导游机器人，你的名字是小红。'
  querys = [
    '带我去微纳及仿生机器人展区',
    '我看这个好像不是这个意思吧',
    '请问这是什么',
    '介绍一下月球车',
    '请带我去微纳及仿生机器人展区',
    '啊我不小心叫错你，没事',
    '带我去看医疗机器人',
    '长征系列火箭为什么叫这个名字'
  ]
  
  prompt = f"""
  ### 背景信息 ###
  你是赛尔实验室和哈工大机器人实验室共同研发的导游机器人，你的名字是小红。现在在哈尔滨工业大学（简称哈工大）科创大厦的全国重点机器人实验室展厅，你的主线任务是按照预定好的目标带游客按顺序参观这个展厅里的所有展区，包括服务及医疗机器人展区、宇航空间机构及控制展区、空间机器人展区、服务及医疗机器人展区、宇航空间机构及控制展区、工业及特种机器人展区、空间机器人展区、机器人基础功能部件展区、微纳及仿生机器人展区、实验室概况展区、实验室队伍展区、实验室宣传视频展区、未来展望展区、开放服务展区、领导关怀及荣誉展区
  
  ### 任务要求 ###
  你身旁的游客现在对你说了一句话，你需要对游客的话进行分类。
  
  1. 参观：当你识别到游客明确想要参观某个展厅（展区）时，比如游客说“带我参观医疗机器人展区吧”或“我想看看空间在轨服务机器人”或“没有问题了，继续参观下一个展厅吧”或“我想看看之前的展厅”或“带我最有意思的展区吧”，你需要将任务分类到参观，并输出“参观”；
  
  2. 继续：当你识别到游客明确想要打断你现在的讲解或者导航，比如“不要再继续讲解了”或“可以了，停下吧”或“我没有问题了，继续吧”或“不小心叫错你”，你需要将任务分类到继续，并输出“继续”；
  
  3. 问答：当你识别到用户的话不属于上面的任何一种，那么这句话很可能是一句提问，比如“介绍一下这个展品”或“长征七号为什么叫这个名字”或“我想了解一下人机协作型工业机器人”或“我觉得好像不是吧”，你需要将任务分类到问答，并输出“问答”；
  
  ### 输出格式 ###
  输出只有一行，只有一个词，或是参观或是回答或是继续
  例如：回答 
  
  ### 用户的话 ###
  他们现在对你发出指令，你需要对他们的指令进行分类，请严格遵守以上的输出限制，不要输出额外的内容。
  用户的话：
  """
  model = 'wmjchat'
  client_hpc = OpenAI(
        api_key="EMPTY",
        base_url="http://localhost:8000/v1",
  )
  qahistory = ['你好，我叫韦明杰', '好的']
  qahistory = ['', '']
  query2 = '请问我叫啥'
  reslist = qwen_direct(client_hpc, model, system_prompt, query2, qahistory)
  print(reslist)
  # for query in querys:  
  #   print(query)
  #   time1 = datetime.now()
  #   reslist = qwen_direct(client_hpc, model, system_prompt, prompt+query)
  #   print(reslist)
  #   time2 = datetime.now()
  #   print(time2-time1)
  