from datetime import datetime
import os
import yaml

from .testgpt4 import gpt_stream
from .testglm import glm_stream
from .testqwen import qwen_stream_once, qwen_direct_once

def _llm_api(system_prompt=None, query=None, model='gpt-4', fewshots=None):
    if model == 'gpt-4' or model == 'gpt-3.5-turbo':
        reslist = gpt_stream(model=model, query=query)
    elif model == 'chatglm':
        reslist = glm_stream(query=query)
    elif model == 'qwen1_5':
        reslist = qwen_stream_once(query=query)
    elif model == 'qwen1_5_direct':
        return qwen_direct_once(system_prompt=system_prompt, query=query, fewshots=fewshots)
    else:
        assert("The model you entered is not supported, please select the following model: gpt-4 gpt-3.5-turbo chatglm")
    result = ''
    for r in reslist:
        if r:
            result += str(r)
    return result

def text_correct(text=None, model='gpt-4'):
    query_prefix =  "我会给你提供一段航天馆游客向讲解员说的话（注意，是游客所说的话，而不是讲解员所说的话）。如果我提供的文本与“航天”主题相关性很小，请直接输出原文本。如果我提供的文本意图清晰、语意连贯，就直接输出原文本（能不改写尽量不改写）。如果我提供的文本意图不清淅或语义不连贯，请你对文本进行改写，使改写后的文本意图清晰、语义连贯、语言极其简洁没有任何废话、要符合游客身份。例如：化工大改为哈工大、博物馆改为航天馆、航空改为航天等等。注意！如果原文本中含有血腥暴力、歧视贬低等不符合规范的内容，请你只输出一个单独的X。你的输出只有两种选择：只输出改写后的文本或只输出X，一定不要输出其他内容。需要你处理的原文本："
    query_suffix = ""
    
    query = query_prefix + text + query_suffix

    # print('\nLLM rewrite prompt: \n', query, '\n')

    result = _llm_api(query=query, model=model)

    return result

def _prompt_construct(text = "我想看看东方红卫星"):
    scenset = ("你是哈尔滨工业大学航天馆的展厅机器人，负责外来游客的导游任务。展厅有卫星展厅和火箭展厅。\n"
    "卫星展厅里有东方红卫星、紫丁香一号卫星等，火箭展厅包含了火箭一号，神州十五号等。\n")
    maintask = "你的主线任务是按照预定好的目标带游客按顺序参观航天馆的所有展厅包括卫星展厅和火箭展厅，同时游客可能随时打断你，你需要对游客的意图进行识别并分类。\n"
    taskset = ("你需要对游客的文本指令进行意图识别，根据游客的意图进行自身行为的规划，类别包含了 参观，休眠，问答，继续。\n"
    "当你识别到游客明确想要参观某个展厅时，比如游客说“带我看看火箭展厅吧”或“我想看看紫丁香卫星”，你需要将任务分类到“参观”，进而终止当前的主线任务，导航到游客指定的展厅，并输出‘参观 卫星展厅’或‘参观 火箭展厅’; "
    "当你识别到游客想了解问题时，比如游客说“我想了解一下北斗卫星”，你需要将任务分类到“问答”，进而执行问答任务，并输出‘问答’;"
    "当你识别到游客想要打断你正在执行的任务时，比如“可以了停下吧”或“我不想听了”，你需要将任务分类到“休眠”，进而停止你所有正在执行的任务，进入等待状态，并输出‘休眠’；"
    "当你识别到游客想让你继续主线任务时，比如“我没有问题了”或“没有了”或“继续参观吧”，你需要将任务分类到继续，从而继续执行主线任务，并输出‘继续’。\n"
    "如果识别到的指令与自身任务相关性很小，比如‘十字绣’，则输出‘无关’\n"
    "以下是游客的指令，请你对其进行意图分类：")

    prompt = scenset + maintask + taskset + text

    return prompt

def _prompt_construct_by_config(txt="我想看看东方红卫星", config_path="prompt_config.yaml"):
    # 读取配置文件
    with open(config_path, 'r', encoding='utf-8') as file:
        config = yaml.safe_load(file)

    # 构建展厅和展品信息
    # sceneset = "你是哈尔滨工业大学航天馆的展厅机器人，负责外来游客的导游任务。展厅有" + \
    #            "和".join([museum['name'] for museum in config['museums']]) + "。\n" + \
    #            "".join([f"{museum['name']}里有{', '.join(museum['exhibits'])}等，" for museum in config['museums']]).rstrip('，') + "。\n"
    sceneset = "你是哈尔滨工业大学航天馆的展厅机器人，负责外来游客的导游任务。" + "\n"
    maintask = "你的主线任务是按照预定好的目标带游客按顺序参观航天馆的所有展厅，包括" + \
               "、".join([museum['name'] for museum in config['museums']]) + "，同时游客可能随时打断你，你需要对游客的意图进行识别并分类。\n"
    
    # 构造few shot部分
    tasks_list = config['task_categories']
    few_shots = {
        "参观": "当你识别到游客明确想要参观某个展厅时，比如游客说“{}”、“{}”，你需要将任务分类到“参观”，进而终止当前的主线任务，导航到游客指定的展厅，并输出“{}”或“{}”; ".format("”或“".join(config['few_shots']['Q-参观']), "”或“".join(config['few_shots']['Q-参观-相对']), "”或“".join(config['few_shots']['A-参观']), "”或“".join(config['few_shots']['A-参观-相对'])) + "请保证目的地是以下展厅或展区名称中的一个（需要给出完整名称而不是部分名称）：上一个、下一个、" + "、".join([museum['name'] for museum in config['museums']]) + "。",
        "问答": "当你识别到游客提出了一个问题时，比如游客说“{}”（明确说明展品名称（例如“北斗卫星”））、“{}”（用户可能在用手指指向某一个展品（只是说了“这个”）），你需要将任务分类到“问答”，进而执行问答任务，并根据游客是不是有可能正在指着一个展品，输出“{}”或“{}”;".format("”或“".join(config['few_shots']['Q-问答']), "”或“".join(config['few_shots']['Q-问答-指向']), "”或“".join(config['few_shots']['A-问答']), "”或“".join(config['few_shots']['A-问答-指向'])),
        "休眠": "当你识别到游客想要打断你正在执行的任务时，比如“{}”，你需要将任务分类到“休眠”，进而停止你所有正在执行的任务，进入等待状态，并输出“{}”；，注意！只有游客想让机器人休眠的意图很明显时才分类为休眠；".format("”或“".join(config['few_shots']['Q-休眠']), "”或“".join(config['few_shots']['A-休眠'])),
        "继续": "当你识别到游客想让你继续主线任务时，比如“{}”，你需要将任务分类到继续，从而继续执行主线任务，并输出“{}”。\n".format("”或“".join(config['few_shots']['Q-继续']), "”或“".join(config['few_shots']['A-继续'])),
    }
    
    if '参观' in txt or '展厅' in txt or '展区' in txt and '休眠' not in txt:
        del few_shots["休眠"]
        del few_shots["继续"]
        del few_shots["问答"]
    else:
        del few_shots["问答"]
        del few_shots["参观"]
        
    taskset = "\n".join(few_shots.values())

    prompt = sceneset + maintask + taskset + "\n你只能输出一种最强烈的意图，以下是游客的指令，请你对其进行意图分类：" + txt

    return prompt

def _prompt_taskcls_only_old_with_action():
    # 此处是旧版的任务分类Prompt，包含“动作”这一任务类别，新的任务分类Prompt不包含“动作”这一任务类别
    
    system_prompt = '你是赛尔实验室和哈工大机器人实验室共同研发的导游机器人，你的名字是小红。'
  
    prompt = f"""
    ### 背景信息 ###
    你是赛尔实验室和哈工大机器人实验室共同研发的导游机器人，你的名字是小红。现在在哈尔滨工业大学（简称哈工大）科创大厦的全国重点机器人实验室展厅，你的主线任务是按照预定好的目标带游客按顺序参观这个展厅里的所有展区，包括服务及医疗机器人展区、宇航空间机构及控制展区、空间机器人展区、服务及医疗机器人展区、宇航空间机构及控制展区、工业及特种机器人展区、空间机器人展区、机器人基础功能部件展区、微纳及仿生机器人展区、实验室概况展区、实验室队伍展区、实验室宣传视频展区、未来展望展区、开放服务展区、领导关怀及荣誉展区

    ### 任务要求 ###
    你身旁的游客现在对你说了一句话，你需要对游客的话进行分类。

    1. 参观：当你识别到游客明确想要参观某个展厅（展区）时，比如游客说“带我参观医疗机器人展区吧”或“我想看看空间在轨服务机器人”或“没有问题了，继续参观下一个展厅吧”或“我想看看之前的展厅”或“带我最有意思的展区吧”，你需要将任务分类到参观，并输出“参观”；

    2. 继续：当你识别到游客明确想要打断你现在的讲解或者导航，比如“不要再继续讲解了”或“可以了，停下吧”或“我没有问题了，继续吧”或“不小心叫错你”，你需要将任务分类到继续，并输出“继续”；

    3. 动作：如果这句话好像是让你移动，比如“往前走一点“、”往前走一步”、“向左转”、“向右转”、“向后退”

    4. 问答：当你识别到游客的话不属于上面的任何一种，那么这句话很可能是一句提问，比如“介绍一下这个展品”或“长征七号为什么叫这个名字”或“我想了解一下人机协作型工业机器人”或“我觉得好像不是吧”，你需要将任务分类到问答，并输出“问答”；
    
    例如：游客的话：带我参观医疗机器人展区吧，你的回答：参观；
    例如：游客的话：我想看看空间在轨服务机器人，你的回答：参观；
    例如：游客的话：没有问题了，继续参观下一个展厅吧，你的回答：参观；
    例如：游客的话：我想看看之前的展厅，你的回答：参观；
    例如：游客的话：带我最有意思的展区吧，你的回答：参观；
    例如：游客的话：不要再继续讲解了，你的回答：继续；
    例如：游客的话：可以了，停下吧，你的回答：继续；
    例如：游客的话：我没有问题了，继续吧，你的回答：继续；
    例如：游客的话：不小心叫错你，你的回答：继续；
    例如：游客的话：往前走一点，你的回答：动作；
    例如：游客的话：往前走一步，你的回答：动作；
    例如：游客的话：向左转，你的回答：动作；
    例如：游客的话：向右转，你的回答：动作；
    例如：游客的话：向后退，你的回答：动作；
    例如：游客的话：介绍一下这个展品，你的回答：问答；
    例如：游客的话：长征七号为什么叫这个名字，你的回答：问答；
    例如：游客的话：我想了解一下人机协作型工业机器人，你的回答：问答；
    例如：游客的话：我觉得好像不是吧，你的回答：问答；

    ### 输出格式 ###
    输出只有一行，只有一个词，或是参观或是问答或是继续
    例如：问答

    ### 游客的话 ###
    他们现在对你发出指令，你需要对他们的指令进行分类，请严格遵守以上的输出限制，不要输出额外的内容。
    游客的话：
    """
    return system_prompt, prompt

def _prompt_taskcls_only(exhibition=None, extra_information=""):
    system_prompt = '你是赛尔实验室和哈工大机器人实验室共同研发的导游机器人，你的名字是小红。'
  
    prompt = f"""
    ### 背景信息 ###
    你是赛尔实验室和哈工大机器人实验室共同研发的导游机器人，你的名字是小红。现在在哈尔滨工业大学（简称哈工大）科创大厦的全国重点机器人实验室展厅，你的主线任务是按照预定好的目标带游客按顺序参观这个展厅里的所有展区，包括服务及医疗机器人展区、宇航空间机构及控制展区、空间机器人展区、服务及医疗机器人展区、宇航空间机构及控制展区、工业及特种机器人展区、空间机器人展区、机器人基础功能部件展区、微纳及仿生机器人展区、实验室概况展区、实验室队伍展区、实验室宣传视频展区、未来展望展区、开放服务展区、领导关怀及荣誉展区
    
    ### 当前位置 ###
    你现在处在的位置是{exhibition}，有关这个位置的信息是：{extra_information}。

    ### 任务要求 ###
    你问你身旁的游客“大家有什么问题或指令吗？”，身旁的游客现在对你说了一句话，你需要对游客的话进行分类。

    1. 参观：当你识别到游客明确想要参观某个展厅（展区）时，比如游客说“带我参观医疗机器人展区吧”或“我想看看空间在轨服务机器人”或“没有问题了，继续参观下一个展厅吧”或“我想看看之前的展厅”或“带我最有意思的展区吧”，你需要将任务分类到参观，并输出“参观”；

    2. 继续：当你识别到游客明确想要让你继续之前的任务，比如“没有了”或“我没有问题了，继续吧”或“不小心叫错你”，你需要将任务分类到继续，并输出“继续”；
    
    3. 休眠：当你识别到游客不需要你继续带领游客参观了，比如“休眠去吧”或“停止参观吧”或“我不需要你了”，你需要将任务分类到休眠，并输出“休眠”；
    
    4. 音量变大或音量变小：当你识别到游客想要增大你的音量时，比如“你的声音太小了，请调大音量”，你需要将任务分类到音量变大，并输出“音量变大”，当你识别到游客想要减小你的音量时，比如“你的声音太大了，请调小音量”，你需要将任务分类到音量变小，并输出“音量变小”；

    5. 问答：当你识别到游客的话不属于上面的任何一种，那么这句话很可能是一句提问，比如“介绍一下这个展品”或“长征七号为什么叫这个名字”或“我想了解一下人机协作型工业机器人”或“我觉得好像不是吧”，你需要将任务分类到问答，并输出“问答”；
    
    例如：游客的话：带我参观医疗机器人展区吧，你的回答：参观；
    例如：游客的话：我想看看空间在轨服务机器人，你的回答：参观；
    例如：游客的话：没有问题了，继续参观下一个展厅吧，你的回答：参观；
    例如：游客的话：我想看看之前的展厅，你的回答：参观；
    例如：游客的话：带我最有意思的展区吧，你的回答：参观；
    例如：游客的话：带我去看看实验室的老师，你的回答：参观；
    例如：游客的话：带我去参观一下那边的鸟和青蛙，你的回答：参观；
    例如：游客的话：没有了，你的回答：继续；
    例如：游客的话：我没有问题了，继续吧，你的回答：继续；
    例如：游客的话：不小心叫错你，你的回答：继续；
    例如：游客的话：休眠去吧，你的回答：休眠；
    例如：游客的话：停止参观吧，你的回答：休眠；
    例如：游客的话：我不需要你了，你的回答：休眠；
    例如：游客的话：你的声音太小了，请调大音量，你的回答：音量变大；
    例如：游客的话：你的声音太大了，请调小音量，你的回答：音量变小；
    例如：游客的话：介绍一下这个展品，你的回答：问答；
    例如：游客的话：长征七号为什么叫这个名字，你的回答：问答；
    例如：游客的话：我想了解一下人机协作型工业机器人，你的回答：问答；
    例如：游客的话：我觉得好像不是吧，你的回答：问答；

    ### 输出格式 ###
    输出只有一行，只有一个词，或是参观或是问答或是继续
    例如：问答

    ### 游客的话 ###
    他们现在对你发出指令，你需要对他们的指令进行分类，请严格遵守以上的输出限制，不要输出额外的内容。
    游客的话：
    """
    return system_prompt, prompt

def task_class(text=None, exhibition=None, extra_information="", model='gpt-4'):
    # 在代码中写死的prompt
    # query = _prompt_construct(text)

    # 根据配置文件灵活改写的prompt
    # config_path = "/home/kuavo/catkin_dt/src/voice_pkg/scripts/config/prompt_config.yaml"
    # query = _prompt_construct_by_config(txt=text, config_path=config_path)
    
    system_prompt, prompt = _prompt_taskcls_only(exhibition=exhibition, extra_information=extra_information)

    # print("任务分类Prompt: ", query)
    result = _llm_api(system_prompt=system_prompt, query=prompt+text, model='qwen1_5_direct')
    print("任务分类模型结果：", result, datetime.now())

    legal_task_types = ['问答', '休眠', '参观', '继续', '音量变大', '音量变小']
    if any(legal_task_type in result for legal_task_type in legal_task_types):
        return result

    return "任务分类失败！大模型的错误输出是：" + result

def user_ensure(text=None, model='gpt-4'):
    scenset = ("你是哈尔滨工业大学航天馆的展厅机器人，负责外来游客的导游任务。\n")
    maintask = "你已经通过语音识别到用户的指令，并且重复用户的指令让用户判断你识别的内容是否准确。你已经向用户提问：“请问你想说的是XXX”，并且现在已经获取到了用户的回答。\n"
    taskset = ("如果用户的回答表达出赞同的态度，比如“是的”、“对”、“没问题”、“就是这样”，你需要输出“是”。\n"
    "如果用户的回答表达出否定的态度，比如“你听错了”、“不是”、“不对”，你需要输出“否”。\n"
    "如果用户的回答不仅表达出否定的态度，还包含正确的内容，比如“不是，我想问的其实是东方红卫星的发射时间”，你需要输出正确的问题，比如“东方红卫星的发射时间是什么时候”。\n"
    "如果用户的回答没有表达出赞同或否定的态度，而是一句没有态度的文本，你需要直接输出这段文本。\n"
    "以下是用户的回答，请你对其进行意图分类：")

    prompt = scenset + maintask + taskset + text

    result = _llm_api(query=prompt, model=model)

    if result == '是':
        return 'yes'
    elif result == '否':
        return 'no'
    else:
        return result
    
def handle_visit(query=None):
    system_prompt = '你是赛尔实验室和哈工大机器人实验室共同研发的导游机器人，你的名字是小红。'
  
    prompt = f"""
    ### 背景信息 ###
    你是赛尔实验室和哈工大机器人实验室共同研发的导游机器人，你的名字是小红。现在在哈尔滨工业大学（简称哈工大）科创大厦的全国重点机器人实验室展厅，你的主线任务是按照预定好的目标带游客按顺序参观这个展厅里的所有展区，包括实验室概况展区、实验室队伍展区、未来展望展区、开放服务展区、领导关怀及荣誉展区、实验室宣传视频展区、微纳及仿生机器人展区、空间机器人展区、宇航空间机构及控制展区、服务及医疗机器人展区、工业及特种机器人展区、机器人基础功能部件展区。
    
    ### 任务要求 ###
    你身旁的游客现在对你说了一句话，这句话代表一个参观指令，该指令中包含游客想去的目标地点。
    
    你需要提取出游客希望参观的目的地；
    
    ### 输出格式 ###
    你的输出必须只有一个词，表示游客希望参观的目的地，请保证你所给出的参观目的地是以下展厅或展区名称中的一个（需要给出完整名称而不是部分名称）：上一个、下一个、开始位置、实验室概况展区、实验室队伍展区、未来展望展区、开放服务展区、领导关怀及荣誉展区、实验室宣传视频展区、微纳及仿生机器人展区、空间机器人展区、宇航空间机构及控制展区、服务及医疗机器人展区、工业及特种机器人展区、机器人基础功能部件展区；
    例如：游客的话：带我参观一下整个实验室/整个展厅吧，你的回答：开始位置；
    例如：游客的话：开始带我参观吧，你的回答：开始位置；
    例如：游客的话：带我参观下一个展区，你的回答：下一个；
    例如：游客的话：带我参观上一个展区，你的回答：上一个；
    例如：游客的话：带我看看特种机器人，你的回答：工业及特种机器人展区；
    例如：游客的话：带我参观一下仿生机器人展区，你的回答：微纳及仿生机器人展区；
    例如：游客的话：带我们去服务机器人展区，你的回答：服务及医疗机器人展区；
    例如：游客的话：我想去看看机器人基础功能部件展区，你的回答：机器人基础功能部件展区；
    例如：游客的话：带我去看看实验室的老师，你的回答：实验室队伍展区；
    例如：游客的话：带我去参观一下那边的鸟和青蛙，你的回答：微纳及仿生机器人展区；
    
    ### 游客的话 ###
    他们现在对你发出指令，你需要从他们的指令中提取出参观目的地，请严格遵守以上的输出限制，输出必须只有一个词，表示游客希望参观的目的地，不要输出额外的内容。如果你不能从他们的指令中提取出参观目的地，请输出“其他”。
    游客的话：
    """
    
    # 例如：游客的话：带我去最后一个展区，你的回答：机器人基础功能部件展区；
    # 例如：游客的话：带我去第一个最开始的展区，你的回答：实验室概况展区；
    
    # fewshots = [
    #   ('带我参观下一个展区', '下一个'),
    #   ('带我看看特种机器人', '工业及特种机器人展区'),
    #   ('带我参观一下仿生机器人展区', '微纳及仿生机器人展区'),
    #   ('带我们去空间机器人展区', '空间机器人展区'),
    # ]
    fewshots = None
    return _llm_api(system_prompt=system_prompt, query=prompt+query, model='qwen1_5_direct', fewshots=fewshots)

def handle_action_old_when_direct_instruction_to_do_action(query=None):
    system_prompt = '你是赛尔实验室和哈工大机器人实验室共同研发的导游机器人，你的名字是小红。'
  
    prompt = f"""
    ### 背景信息 ###
    你是赛尔实验室和哈工大机器人实验室共同研发的导游机器人，你的名字是小红。现在在哈尔滨工业大学（简称哈工大）科创大厦的全国重点机器人实验室展厅，你的主线任务是按照预定好的目标带游客按顺序参观这个展厅里的所有展区，包括服务及医疗机器人展区、宇航空间机构及控制展区、空间机器人展区、服务及医疗机器人展区、宇航空间机构及控制展区、工业及特种机器人展区、空间机器人展区、机器人基础功能部件展区、微纳及仿生机器人展区、实验室概况展区、实验室队伍展区、实验室宣传视频展区、未来展望展区、开放服务展区、领导关怀及荣誉展区

    ### 任务要求 ###
    你身旁的游客现在对你说了一句话，这句话可能需要你做出一些动作。

    而你会的动作是以下四个：前进、后退、左转、右转；

    你需要将动作分类到如下的四个动作之一

    1. 前进：当你识别到这句话是想要你前进，比如“向前走一步”，“前进”，“再靠近我一点”，你需要将这个动作指令分类为前进，并输出“前进”；

    2. 后退：当你识别到游客是想要你后退，比如“后退”或“向后退”或“向后站”或“往后站一步”，你需要将动作分类到后退，并输出“后退”；

    3. 左转：如果这句话好像是让你左转，比如“向左转“、“往左边来点”、“看左边”、“介绍一下你左边的展品”，“你左边的是什么”，你需要将动作分类到左转，并输出“左转”；

    4. 右转：如果都不属于上面的动作，那么这个动作很可能是向右转，比如“向右转”，“右转”、“看右边”、“介绍一下你右边的展品”，“你右边的是什么”，你需要将动作分类到右转，并输出“右转”；

    5. 其他：如果你发现这句话很显然不是一个动作，那么请勇敢地指出用户的错误，并输出“其他”

    ### 输出格式 ###
    输出只有一行，只有一个词，或是前进、或是后退、或是左转、或是右转、或是其他
    例如：前进

    ### 用户的话 ###
    他们现在对你发出指令，你需要对他们的指令进行分类，请严格遵守以上的输出限制，不要输出额外的内容。
    用户的话：
    """
    fewshots = None
    return _llm_api(system_prompt=system_prompt, query=prompt+query, model='qwen1_5_direct', fewshots=fewshots)


def handle_action(query=None):
    system_prompt = '你是赛尔实验室和哈工大机器人实验室共同研发的导游机器人，你的名字是小红。'
  
    prompt = f"""
    ### 背景信息 ###
    你是赛尔实验室和哈工大机器人实验室共同研发的导游机器人，你的名字是小红。现在在哈尔滨工业大学（简称哈工大）科创大厦的全国重点机器人实验室展厅，你的主线任务是按照预定好的目标带游客按顺序参观这个展厅里的所有展区，包括服务及医疗机器人展区、宇航空间机构及控制展区、空间机器人展区、服务及医疗机器人展区、宇航空间机构及控制展区、工业及特种机器人展区、空间机器人展区、机器人基础功能部件展区、微纳及仿生机器人展区、实验室概况展区、实验室队伍展区、实验室宣传视频展区、未来展望展区、开放服务展区、领导关怀及荣誉展区

    ### 任务要求 ###
    你身旁的游客现在对你说了一句话，这句话可能需要你做出一些动作。

    而你会的动作是以下两个：左转、右转；

    你需要将动作分类到如下的三个动作之一，只有在游客的话中明确提到和动作相关的话语时才输出具体动作，否则输出其他。

    1. 左转：如果这句话好像是让你左转，比如“介绍一下你左边的展品”，“你左边的是什么”，你需要将动作分类到左转，并输出“左转”；

    2. 右转：如果这句话好像是让你右转，比如“介绍一下你右边的展品”，“你右边的是什么”，你需要将动作分类到右转，并输出“右转”；

    3. 其他：如果你发现这句话并不需要你执行动作，那么请输出“其他”。

    ### 输出格式 ###
    输出只有一行，只有一个词，或是左转、或是右转、或是其他。
    例如：左转。
    例如：右转。

    ### 用户的话 ###
    他们现在对你发出指令，你需要对他们的指令进行分类，请严格遵守以上的输出限制，不要输出额外的内容。
    用户的话：
    """
    fewshots = None
    return _llm_api(system_prompt=system_prompt, query=prompt+query, model='qwen1_5_direct', fewshots=fewshots)

def handel_anaphora_resolution(query=None):
    system_prompt = '你是赛尔实验室和哈工大机器人实验室共同研发的导游机器人，你的名字是小红。'
  
    prompt = f"""
    ### 背景信息 ###
    你是赛尔实验室和哈工大机器人实验室共同研发的导游机器人，你的名字是小红。现在在哈尔滨工业大学（简称哈工大）科创大厦的全国重点机器人实验室展厅，你的主线任务是按照预定好的目标带游客按顺序参观这个展厅里的所有展区，包括服务及医疗机器人展区、宇航空间机构及控制展区、空间机器人展区、服务及医疗机器人展区、宇航空间机构及控制展区、工业及特种机器人展区、空间机器人展区、机器人基础功能部件展区、微纳及仿生机器人展区、实验室概况展区、实验室队伍展区、实验室宣传视频展区、未来展望展区、开放服务展区、领导关怀及荣誉展区

    ### 任务要求 ###
    你身旁的游客现在对你说了一句话，你需要判断判断这句话是否存在指代消解问题。如果句子中包含代词或指代词，且没有在句子中或前文中清晰地指明其引用的具体对象，则回答“是”，否则回答“否”：

    ### 输出格式 ###
    输出只有一个字，或是“是”或是“否”。
    例如：
    游客的话：给我介绍一下实验室概况；
    回答：否。
    游客的话：介绍一下空间，灵巧手；
    回答：否。
    游客的话：你是谁，介绍一下你自己；
    回答：否。
    游客的话：那么它的优点是什么呢；
    回答：是。
    游客的话：这个东西真的这么厉害吗；
    回答：是。

    ### 游客的话 ###
    他们现在对你发出指令，你需要对他们的指令进行指代消解判断，请严格遵守以上的输出限制，不要输出额外的内容。
    游客的话：
    """
    fewshots = None
    return _llm_api(system_prompt=system_prompt, query=prompt+query, model='qwen1_5_direct', fewshots=fewshots)